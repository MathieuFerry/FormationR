)
})
print("\nDetailed Shapley Value Statistics:")
print(detailed_shap)
# Sample data frame
data <- data.frame(
educational_rank = round(runif(500, min = 10, max = 100)), # Random ranks
caste = sample(c('A', 'B', 'C'), 500, replace = TRUE),
gender = sample(c('M', 'F'), 500, replace = TRUE),
region = sample(c('North', 'South', 'East', 'West'), 500, replace = TRUE),
religion = sample(c('Hindu', 'Muslim', 'Christian'), 500, replace = TRUE)
)
# Fit the linear model
model <- lm(educational_rank ~ caste + gender + region + religion, data = data)
# Perform ANOVA to decompose variance
anova_results <- anova(model)
# Display the ANOVA table
print(anova_results)
# Calculate the proportion of variance explained by each factor
total_sum_sq <- sum(anova_results$`Sum Sq`)
anova_results$Proportion <- anova_results$`Sum Sq` / total_sum_sq
# Display the results with proportions
print(anova_results)
# Fit the linear model with interaction terms
interaction_model <- lm(educational_rank ~ caste * gender * region * religion, data = data)
summary(interaction_model)
# Perform ANOVA to decompose variance
interaction_anova <- anova(interaction_model)
# Calculate the proportion of variance explained by each term
total_sum_sq_interaction <- sum(interaction_anova$`Sum Sq`)
interaction_anova$Proportion <- interaction_anova$`Sum Sq` / total_sum_sq_interaction
# Display the results with proportions
print(interaction_anova)
load("/Users/mathieuferry/Documents/Enseignements/Année 2024-2025/L3 ADD/Cours/Séance 10/TD/Rendus Etudiants/td10 AYA S (1).RData")
library(rsconnect)
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='mathieufer',
token='4780DAA39113AD67752B9E8EDD59BBDE',
secret='c7v8fEHpBtFn98+ethmDMlsQ37n+BFvjwNGYson/')
rsconnect::deployApp('/Users/mathieuferry/Documents/Recherche/Shiny apps/acm_3gen')
rsconnect::deployApp('/Users/mathieuferry/Documents/Recherche/Shiny apps/acm_3gen')
rsconnect::deployApp('/Users/mathieuferry/Documents/Recherche/Shiny apps/acm_3gen')
shiny::runApp('Documents/Recherche/Shiny apps/Basic textual analysis')
??fviz_ca_biplot
gc()
?read_excel
??read_excel
shiny::runApp('Documents/Recherche/Shiny apps/Basic textual analysis')
runApp('Documents/Recherche/Shiny apps/Basic textual analysis')
?unlink
runApp('Documents/Recherche/Shiny apps/Basic textual analysis')
??https://mathieuferry.github.io/datasets
??read.xlsx
runApp('Documents/Recherche/Shiny apps/Basic textual analysis')
runApp('Documents/Recherche/Shiny apps/Basic textual analysis')
runApp('Documents/Recherche/Shiny apps/Basic textual analysis')
runApp('Documents/Recherche/Shiny apps/Basic textual analysis')
sample_data <- openxlsx::read.xlsx("https://mathieuferry.github.io/datasets/wokisme_pressenationalefr.xlsx")
View(sample_data)
sample_data <- openxlsx::read.xlsx("https://mathieuferry.github.io/datasets/wokisme_pressenationalefr.xlsx",na.strings = "")
View(sample_data)
sample_data[is.na(sample_data)] <- ""
View(sample_data)
runApp('Documents/Recherche/Shiny apps/Basic textual analysis')
runApp('Documents/Recherche/Shiny apps/Basic textual analysis')
x<- .packages(T)
length(loadedNamespaces())
length(loadedNamespaces())
length(loadedNamespaces())
sessionInfo()
shiny::runApp('Documents/Recherche/Shiny apps/example/shinyproxy-deployment/app')
gc()
gc()
gc()
library(questionr)
questionr:::irec()
library(questionr)
questionr:::irec()
setwd("/Volumes/T7/Recherche/Donnees/TeO/Base/Progedo/lil-1575/lil-1575-Donnees_STATA")
?user_na_to_na
?save
setwd("/Volumes/T7/Recherche/Donnees/TeO/Base/Progedo/lil-1575/lil-1575-Donnees_STATA")
library(haven)
library(tidyr)
library(dplyr)
library(questionr)
indiv<-read_dta("indiv.dta")
library(usethis)
usethis::create_package("/Users/mathieuferry/Documents/Recherche/Shiny apps/Basic textual analysis/Package")
# On liste les packages dont on a besoin dans un vecteur nommé load.lib.
load.lib <- c("openxlsx","tidyverse", "questionr", "kableExtra", "esquisse", "FactoMineR", "explor", "rainette", "quanteda", "quanteda.textstats", "quanteda.textplots","rainette")
install.lib <- load.lib[!load.lib %in% installed.packages()] # On regarde les paquets qui ne sont pas installés
for (lib in install.lib) install.packages(lib,dependencies=TRUE) # On installe ceux-ci
sapply(load.lib,require,character=TRUE) # Et on charge tous les paquets
setwd("/./Volumes/Macintosh HD/Users/mathieuferry/Documents/Enseignements/Année 2024-2025/Formation R/Tutoriel/Data")
textes<-read.xlsx("base_de_donnees2025-04-26_wokisme.xlsx")
str(textes)
# L'exploration du corpus ---------------------------------------------------
#...
textes$Date
Sys.setlocale("LC_TIME", "fr_FR.UTF-8")
textes$Date_propre <- as.Date(textes$Date, format = "%d %B %Y")
# Extraire l'année
textes$Annee <- format(textes$Date_propre, "%Y")
textes$Annee <- str_extract(textes$Date, "[0-9]{4}$")
esquisser(textes)
ggplot(textes) +
aes(x = Date_propre) +
geom_histogram(bins = 30L, fill = "#000000") +
labs(x = "Période", y = "Nombre d'articles") +
theme_light() +
theme(
axis.title.y = element_text(size = 18L),
axis.title.x = element_text(size = 18L),
axis.text.y = element_text(size = 18L),
axis.text.x = element_text(size = 14L),
legend.text = element_text(size = 18L),
legend.title = element_text(size = 18L),
strip.text = element_text(size = 18L) #Augmenter taille des labels des facets
) +
facet_wrap(vars(NomSource))
corpus <- corpus(textes$Texte)
tok <- tokens(corpus, remove_punct = TRUE,
remove_symbols=TRUE,
remove_numbers =TRUE)
textes$nmots <- ntoken(tok)
stopwords_url <- "https://raw.githubusercontent.com/gillesbastin/french_stopwords/main/french_stopwords.csv"
stop_fr <- read_csv2(stopwords_url)
mot_woke<-c("wokisme","woke","wokiste")
tok <- tokens_remove(tok,c(stop_fr$token,mot_woke))
dtm <- dfm(tok, tolower = TRUE)
dtm <- dfm_trim(dtm, min_docfreq = 5)
textplot_wordcloud(dtm, random_order = F, rotation = 0.25,min_size =1,max_words = 100,
color = RColorBrewer::brewer.pal(8, "Dark2"))
# AFC ---------------------------------------------------------------------
dtm_mat <- convert(dtm, to = "data.frame")
rownames(dtm_mat) <- dtm_mat$doc_id
dtm_mat$doc_id <- NULL
dtm_dense <- as.matrix(dtm)
View(dtm_mat)
ca<-CA(dtm_dense,graph=F)
explor(ca)
# AFC ---------------------------------------------------------------------
dtm_pour_afc <- dfm_trim(dtm, min_docfreq = 10)
dtm_mat <- convert(dtm, to = "data.frame")
rownames(dtm_mat) <- dtm_mat$doc_id
dtm_mat$doc_id <- NULL
ca<-CA(dtm_dense,graph=F)
# AFC ---------------------------------------------------------------------
dtm_pour_afc <- dfm_trim(dtm, min_docfreq = 100)
dtm_mat <- convert(dtm, to = "data.frame")
rownames(dtm_mat) <- dtm_mat$doc_id
dtm_mat$doc_id <- NULL
# AFC ---------------------------------------------------------------------
dtm_pour_afc <- dfm_trim(dtm, min_docfreq = 10)
dtm_mat <- convert(dtm, to = "data.frame")
rownames(dtm_mat) <- dtm_mat$doc_id
dtm_mat$doc_id <- NULL
# AFC ---------------------------------------------------------------------
dtm_pour_afc <- dfm_trim(dtm, min_docfreq = 10)
dtm_mat <- convert(dtm_pour_afc, to = "data.frame")
rownames(dtm_mat) <- dtm_mat$doc_id
dtm_mat$doc_id <- NULL
ca<-CA(dtm_mat,graph=F)
explor(ca)
# AFC ---------------------------------------------------------------------
dtm_pour_afc <- dfm_trim(dtm, min_docfreq = 20)
dtm_mat <- convert(dtm_pour_afc, to = "data.frame")
rownames(dtm_mat) <- dtm_mat$doc_id
dtm_mat$doc_id <- NULL
ca<-CA(dtm_mat,graph=F)
explor(ca)
explor::CA_var_plot(res, xax = 1, yax = 2, lev_sup = FALSE, var_sup = FALSE,
var_sup_choice = , var_hide = "Row", var_lab_min_contrib = 100, col_var = "Position",
symbol_var = NULL, size_var = NULL, size_range = c(10, 300), labels_size = 10,
point_size = 56, transitions = TRUE, labels_positions = NULL, xlim = c(-2.51,
2.41), ylim = c(-2.27, 2.65))
explor::CA_var_plot(ca, xax = 1, yax = 2, lev_sup = FALSE, var_sup = FALSE,
var_sup_choice = , var_hide = "Row", var_lab_min_contrib = 100, col_var = "Position",
symbol_var = NULL, size_var = NULL, size_range = c(10, 300), labels_size = 10,
point_size = 56, transitions = TRUE, labels_positions = NULL, xlim = c(-2.51,
2.41), ylim = c(-2.27, 2.65))
fviz_ca_col(ca, repel = TRUE)
library(factoextra)
?fviz_ca_col
fviz_ca_col(ca,select.col=list(contrib=100), repel = TRUE)
fviz_ca_col(ca,select.col=list(contrib=200), repel = TRUE)
# AFC ---------------------------------------------------------------------
dtm_reduc <- dfm_trim(dtm, min_docfreq = 20)
dtm_pour_afc <- convert(dtm_reduc, to = "data.frame")
dtm_pour_afc$doc_id
View(textes)
# AFC ---------------------------------------------------------------------
dtm_reduc <- dfm_trim(dtm, min_docfreq = 20)
dtm_pour_afc <- convert(dtm_reduc, to = "data.frame")
rownames(dtm_pour_afc) <- dtm_pour_afc$doc_id
dtm_pour_afc$doc_id <- NULL
dtm_pour_afc<-cbind(dtm_pour_afc,textes$NomSource,textes$Auteur,textes$Annee)
?CA
# AFC ---------------------------------------------------------------------
#On ne garde que les termes mentionnés au moins 20 x ... !
dtm_reduc <- dfm_trim(dtm, min_docfreq = 20)
#On convertit la matrice en un data frame
dtm_pour_afc <- convert(dtm_reduc, to = "data.frame")
#On enlève la colonne doc_id, convertie en rownames
rownames(dtm_pour_afc) <- dtm_pour_afc$doc_id
dtm_pour_afc$doc_id <- NULL
#On ajoute trois colonnes de métadonnées sur les textes
dtm_pour_afc<-cbind(textes$NomSource,textes$Auteur,textes$Annee,dtm_pour_afc)
ca<-CA(dtm_mat,graph=F,col.sup=1:3)
library(factoextra)
fviz_ca_col(ca,select.col=list(contrib=200), repel = TRUE)
# AFC ---------------------------------------------------------------------
#On ne garde que les termes mentionnés au moins 20 x ... !
dtm_reduc <- dfm_trim(dtm, min_docfreq = 20)
#On convertit la matrice en un data frame
dtm_pour_afc <- convert(dtm_reduc, to = "data.frame")
#On enlève la colonne doc_id, convertie en rownames
rownames(dtm_pour_afc) <- dtm_pour_afc$doc_id
dtm_pour_afc$doc_id <- NULL
fviz_eig(ca)
fviz_eig(ca,axes=1:100)
?fviz_eig
fviz_eig(ca,ncp=100)
fviz_eig(ca,ncp=50)
fviz_eig(ca,ncp=20)
fviz_ca_col(ca,select.col=list(contrib=200), repel = TRUE)
?fviz_ca_col
fviz_ca_col(
ca,
invisible = "col.active"  # ne pas afficher les colonnes actives
col.col.sup = "cos2",     # colorier les variables supplémentaires selon leur cos²
fviz_ca_col(
ca,
invisible = "col.active"  # ne pas afficher les colonnes actives
col.col.sup = "cos2",     # colorier les variables supplémentaires selon leur cos²
fviz_ca_col(
ca,
invisible = "col.active"  # ne pas afficher les colonnes actives
col.sup = "cos2",     # colorier les variables supplémentaires selon leur cos²
fviz_ca_col(
ca,
invisible = "col.active",  # ne pas afficher les colonnes actives
col.col.sup = "cos2",     # colorier les variables supplémentaires selon leur cos²
select.col.sup = list(cos2 = 0.1),  # optionnel : ne montrer que celles avec cos² > 0.1
repel = TRUE
)
fviz_ca_col(
ca,
invisible = "col.active",  # ne pas afficher les colonnes actives
col.col.sup = "cos2",     # colorier les variables supplémentaires selon leur cos2
select.col.sup = list(cos2 = 0.8),  # optionnel : ne montrer que celles avec cos2 > 0.1
repel = TRUE
)
fviz_ca_col(
ca,
invisible = "col",  # ne pas afficher les colonnes actives
col.col.sup = "cos2",     # colorier les variables supplémentaires selon leur cos2
select.col.sup = list(cos2 = 0.8),  # optionnel : ne montrer que celles avec cos2 > 0.1
repel = TRUE
)
ca<-CA(dtm_pour_afc,graph=F,col.sup=1:3)
library(factoextra)
fviz_eig(ca,ncp=20)
fviz_ca_col(ca,select.col=list(contrib=200),axes = c(1, 2), repel = TRUE)
fviz_eig(ca,ncp=20)
fviz_ca_col(ca,select.col=list(contrib=200),axes = c(1, 2), repel = TRUE)
fviz_ca_col(
ca,
invisible = "col",  # ne pas afficher les colonnes actives
col.col.sup = "cos2",     # colorier les variables supplémentaires selon leur cos2
select.col.sup = list(cos2 = 0.8),  # optionnel : ne montrer que celles avec cos2 > 0.1
repel = TRUE
)
View(dtm_pour_afc)
textes$NomSource
View(dtm_pour_afc)
# AFC ---------------------------------------------------------------------
#On ne garde que les termes mentionnés au moins 20 x ... !
dtm_reduc <- dfm_trim(dtm, min_docfreq = 20)
#On convertit la matrice en un data frame
dtm_pour_afc <- convert(dtm_reduc, to = "data.frame")
#On enlève la colonne doc_id, convertie en rownames
rownames(dtm_pour_afc) <- dtm_pour_afc$doc_id
dtm_pour_afc$doc_id <- NULL
#On ajoute trois colonnes de métadonnées sur les textes
dtm_pour_afc<-cbind(textes$NomSource,textes$Auteur,textes$Annee,dtm_pour_afc)
# AFC ---------------------------------------------------------------------
#On ne garde que les termes mentionnés au moins 20 x ... !
dtm_reduc <- dfm_trim(dtm, min_docfreq = 20)
#On convertit la matrice en un data frame
dtm_pour_afc <- convert(dtm_reduc, to = "data.frame")
#On enlève la colonne doc_id, convertie en rownames
rownames(dtm_pour_afc) <- dtm_pour_afc$doc_id
dtm_pour_afc$doc_id <- NULL
#On ajoute trois colonnes de métadonnées sur les textes
dtm_pour_afc<-cbind(NomSource=textes$NomSource,Auteur=textes$Auteur,Annee=textes$Annee,dtm_pour_afc)
ca<-CA(dtm_pour_afc,graph=F,col.sup=1:3)
?CA
ca<-CA(dtm_pour_afc,graph=F,quali.sup=1:3)
library(factoextra)
fviz_eig(ca,ncp=20)
fviz_ca_col(ca,select.col=list(contrib=200),axes = c(1, 2), repel = TRUE)
fviz_ca_col(
ca,
invisible = "col",  # ne pas afficher les colonnes actives
col.col.sup = "cos2",     # colorier les variables supplémentaires selon leur cos2
select.col.sup = list(cos2 = 0.8),  # optionnel : ne montrer que celles avec cos2 > 0.1
repel = TRUE
)
fviz_ca_biplot(
ca,
label = "quali.sup",         # afficher seulement les modalités quali.sup
habillage = "quali.sup",     # colorer selon quali.sup
repel = TRUE
)
?fviz_ca_biplot
fviz_ca_col(ca,alpha.col=0,axes = c(1, 2), repel = TRUE)
fviz_ca_col(ca,select.col=list(name %in% c("NomSource")),axes = c(1, 2), repel = TRUE)
fviz_ca_col(ca,select.col=list(name =c("NomSource")),axes = c(1, 2), repel = TRUE)
?ggscatter
ggscatter(ca$quali.sup$coord, x = paste0("Dim.",1), y = paste0("Dim.",2), label = "name",
title="CA",
font.label=c(14,"plain"),repel=T,
ggtheme = theme_minimal()
)+
geom_vline(xintercept = 0, linetype = "dashed")+
geom_hline(yintercept = 0, linetype = "dashed")
ggpubr::ggscatter(ca$quali.sup$coord, x = paste0("Dim.",1), y = paste0("Dim.",2), label = "name",
title="CA",
font.label=c(14,"plain"),repel=T,
ggtheme = theme_minimal()
)+
geom_vline(xintercept = 0, linetype = "dashed")+
geom_hline(yintercept = 0, linetype = "dashed")
ca$quali.sup$coord
ggpubr::ggscatter(ca$quali.sup$coord[,c(1,2)], x = paste0("Dim.",1), y = paste0("Dim.",2), label = "name",
title="CA",
font.label=c(14,"plain"),repel=T,
ggtheme = theme_minimal()
)+
geom_vline(xintercept = 0, linetype = "dashed")+
geom_hline(yintercept = 0, linetype = "dashed")
paste0("Dim.",1)
head(ca$quali.sup$coord[,c(1,2)])
ggpubr::ggscatter(ca$quali.sup$coord[,c(1,2)], x = paste0("Dim ",1), y = paste0("Dim ",2), label = "name",
title="CA",
font.label=c(14,"plain"),repel=T,
ggtheme = theme_minimal()
)+
geom_vline(xintercept = 0, linetype = "dashed")+
geom_hline(yintercept = 0, linetype = "dashed")
ggpubr::ggscatter(ca$quali.sup$coord[,c(1,2)], x = paste0("Dim ",1), y = paste0("Dim ",2), label = "name",
title="CA",
font.label=c(14,"plain"),repel=T,
ggtheme = theme_minimal()
)
quali_coord <- as.data.frame(res.ca$quali.sup$coord)
quali_cos2 <- as.data.frame(res.ca$quali.sup$cos2)
quali_coord <- as.data.frame(ca$quali.sup$coord)
quali_cos2 <- as.data.frame(ca$quali.sup$cos2)
# Fusionner les deux
quali_coord$cos2 <- rowSums(quali_cos2)
quali_coord$mod <- rownames(quali_coord)
quali_coord$mod
ggplot(quali_coord, aes(x = Dim.1, y = Dim.2, label = mod, color = cos2)) +
geom_point(size = 3) +
geom_text_repel(size = 4) +
scale_color_viridis_c(option = "D") +
theme_minimal() +
labs(title = "Modalités des variables qualitatives supplémentaires",
x = "Dimension 1", y = "Dimension 2", color = "cos²")
library(ggrepel)
ggplot(quali_coord, aes(x = Dim.1, y = Dim.2, label = mod, color = cos2)) +
geom_point(size = 3) +
geom_text_repel(size = 4) +
scale_color_viridis_c(option = "D") +
theme_minimal() +
labs(title = "Modalités des variables qualitatives supplémentaires",
x = "Dimension 1", y = "Dimension 2", color = "cos²")
quali_coord
View(quali_coord)
quali_coord <- as.data.frame(ca$quali.sup$coord)
quali_cos2 <- as.data.frame(ca$quali.sup$cos2)
quali_cos2
quali_coord <- as.data.frame(ca$quali.sup$coord)
View(quali_coord)
quali_coord <- as.data.frame(ca$quali.sup$coord)
quali_coord$mod <- rownames(quali_coord)
ggplot(quali_coord, aes(x = Dim.1, y = Dim.2, label = mod)) +
geom_point(size = 3) +
geom_text_repel(size = 4) +
scale_color_viridis_c(option = "D") +
theme_minimal() +
labs(title = "Modalités des variables qualitatives supplémentaires",
x = "Dimension 1", y = "Dimension 2", color = "cos²")
ggplot(quali_coord, aes(x = `Dim 1`, y = `Dim.2`, label = mod)) +
geom_point(size = 3) +
geom_text_repel(size = 4) +
scale_color_viridis_c(option = "D") +
theme_minimal() +
labs(title = "Modalités des variables qualitatives supplémentaires",
x = "Dimension 1", y = "Dimension 2", color = "cos²")
ggplot(quali_coord, aes(x = `Dim 1`, y = `Dim 2`, label = mod)) +
geom_point(size = 3) +
geom_text_repel(size = 4) +
scale_color_viridis_c(option = "D") +
theme_minimal() +
labs(title = "Modalités des variables qualitatives supplémentaires",
x = "Dimension 1", y = "Dimension 2", color = "cos²")
ggplot(quali_coord, aes(x = `Dim 1`, y = `Dim 2`, label = mod)) +
geom_point(size = .5) +
geom_text_repel(size = 4) +
scale_color_viridis_c(option = "D") +
theme_minimal() +
labs(title = "Modalités des variables qualitatives supplémentaires",
x = "Dimension 1", y = "Dimension 2", color = "cos²")
ggplot(quali_coord, aes(x = `Dim 1`, y = `Dim 2`, label = mod)) +
geom_vline(xintercept = 0, linetype = "dashed")+
geom_hline(yintercept = 0, linetype = "dashed")+
geom_point(size = .5) +
geom_text_repel(size = 4) +
scale_color_viridis_c(option = "D") +
theme_minimal() +
labs(title = "Modalités des variables qualitatives supplémentaires",
x = "Dimension 1", y = "Dimension 2", color = "cos2")
quali_coord <- as.data.frame(ca$quali.sup$coord)
quali_coord$mod <- rownames(quali_coord)
quali_coord$mod
quali_coord$mod <- str_remove(quali_coord$mod, "^[^\\.]+\\.")
ggplot(quali_coord, aes(x = `Dim 1`, y = `Dim 2`, label = mod)) +
geom_vline(xintercept = 0, linetype = "dashed")+
geom_hline(yintercept = 0, linetype = "dashed")+
geom_point(size = .5) +
geom_text_repel(size = 4) +
scale_color_viridis_c(option = "D") +
theme_minimal() +
labs(title = "Modalités des variables qualitatives supplémentaires",
x = "Dimension 1", y = "Dimension 2", color = "cos2")
#On ajoute trois colonnes de métadonnées sur les textes
dtm_pour_afc<-cbind(NomSource=textes$NomSource,Annee=textes$Annee,dtm_pour_afc)
ca<-CA(dtm_pour_afc,graph=F,quali.sup=1:2)
# AFC ---------------------------------------------------------------------
#On ne garde que les termes mentionnés au moins 20 x ... !
dtm_reduc <- dfm_trim(dtm, min_docfreq = 20)
#On convertit la matrice en un data frame
dtm_pour_afc <- convert(dtm_reduc, to = "data.frame")
#On enlève la colonne doc_id, convertie en rownames
rownames(dtm_pour_afc) <- dtm_pour_afc$doc_id
dtm_pour_afc$doc_id <- NULL
#On ajoute trois colonnes de métadonnées sur les textes
dtm_pour_afc<-cbind(NomSource=textes$NomSource,Annee=textes$Annee,dtm_pour_afc)
ca<-CA(dtm_pour_afc,graph=F,quali.sup=1:2)
quali_coord <- as.data.frame(ca$quali.sup$coord)
quali_coord$mod <- rownames(quali_coord)
quali_coord$mod <- str_remove(quali_coord$mod, "^[^\\.]+\\.")
ggplot(quali_coord, aes(x = `Dim 1`, y = `Dim 2`, label = mod)) +
geom_vline(xintercept = 0, linetype = "dashed")+
geom_hline(yintercept = 0, linetype = "dashed")+
geom_point(size = .5) +
geom_text_repel(size = 4) +
scale_color_viridis_c(option = "D") +
theme_minimal() +
labs(title = "Modalités des variables qualitatives supplémentaires",
x = "Dimension 1", y = "Dimension 2", color = "cos2")
quali_coord <- as.data.frame(ca$quali.sup$coord)
quali_coord$mod <- rownames(quali_coord)
quali_coord$mod <- str_remove(quali_coord$mod, "^[^\\.]+\\.")
ggplot(quali_coord, aes(x = `Dim 1`, y = `Dim 2`, label = mod)) +
geom_vline(xintercept = 0, linetype = "dashed")+
geom_hline(yintercept = 0, linetype = "dashed")+
geom_point(size = .5) +
geom_text_repel(size = 4) +
theme_minimal() +
labs(title = "Modalités des variables qualitatives supplémentaires",
x = "Dimension 1", y = "Dimension 2", color = "cos2")
explor(ca)
res <- rainette(dtm, k = 10)
rainette_explor(res, dtm, corpus)
textes$cluster <- cutree(res, k = 4) #Ou remplacer 4 par le nombre de clusters finalement retenu
textes$cluster
?tokens
corpus <- corpus(textes$Texte)
tok <- tokens(corpus, remove_punct = TRUE,
remove_symbols=TRUE,
remove_numbers =TRUE)
tok
corpus
?unnest_tokens
corpus <- corpus |> mutate(corpus = str_replace_all(corpus, "'", " "))
textes$Textec = str_replace_all(textes$Texte, "[‘’´`ʻʼʽʾʿˊˋ˘˙’]", " ")
corpus <- corpus(textes$Textec)
tok <- tokens(corpus, remove_punct = TRUE,
remove_symbols=TRUE,
remove_numbers =TRUE)
textes$nmots <- ntoken(tok)
stopwords_url <- "https://raw.githubusercontent.com/gillesbastin/french_stopwords/main/french_stopwords.csv"
stop_fr <- read_csv2(stopwords_url)
mot_woke<-c("wokisme","woke","wokiste")
tok <- tokens_remove(tok,c(stop_fr$token,mot_woke))
dtm <- dfm(tok, tolower = TRUE)
dtm <- dfm_trim(dtm, min_docfreq = 5)
textplot_wordcloud(dtm, random_order = F, rotation = 0.25,min_size =1,max_words = 100,
color = RColorBrewer::brewer.pal(8, "Dark2"))
textes$Textec
textes$Textec = str_replace_all(textes$Texte, "[‘’´`ʻʼʽʾʿˊˋ˘˙’']", " ")
corpus <- corpus(textes$Textec)
tok <- tokens(corpus, remove_punct = TRUE,
remove_symbols=TRUE,
remove_numbers =TRUE)
textes$nmots <- ntoken(tok)
